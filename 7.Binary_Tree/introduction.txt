linear data structures      -> array, stack, queue, linked list
hierarchial data structures -> trees

1. tree vocabulary
    root node   -> topmost node
    parent node -> element that are directly above an element
    child node  -> element that are directly under an element
    leaves      -> node that has no child nodes

2. why trees? 
    to store information in form of hierarchy.
    provides moderate access/search (quick thn linked list & slow thn arrays)
    provides moderate insertion/deletion (quick thn arrays & slow thn unordered linked list)

3. binary tree
    a tree whose element have atmost 2 child is called binary tree

4. binary tree properties
    maximum number of nodes at level ‘l’ of a binary tree is "2^l"
        ex: root node = level 0 = 2^0 = 1 node.
    maximum number of nodes in a binary tree of height ‘h’ is "2h–1".
        ex: root node = height 1 = 2(1)-1 = 1 node

5. types of binary tree
    full binary tree
        every node has 0 or 2 children
        all nodes except leaf nodes have children
    perfect binary tree
        all the internal nodes have 2 children and all leaf nodes are at same level
    complete binary tree
        all the levels are completely filled except last level
    balanced binary tree
        if the height of the tree is O(Log n) where n is the number of nodes.
    A degenerate (or pathological) binary tree 
        every internal node has one child. 
        Such trees are performance-wise same as linked list. 

6. tree traversals
    
            1
        2       3
    4       5

    Depth First Traversals: 
        Inorder (Left, Root, Right) : 4 2 5 1 3 
        Preorder (Root, Left, Right) : 1 2 4 5 3 
        Postorder (Left, Right, Root) : 4 5 2 3 1
    Breadth First or Level Order Traversal : 
        1 2 3 4 5 